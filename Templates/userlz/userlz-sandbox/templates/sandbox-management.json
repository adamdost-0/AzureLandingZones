{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnet-name": {
            "type": "string",
            "defaultValue": "vnet01",
            "metadata": {
                "description": "Name of new or existing vnet to which Azure Bastion should be deployed"
            }
        },
        "vnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.0.0/16",
            "metadata": {
                "description": "IP prefix for available addresses in vnet address space"
            }
        },
        "bastion-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.1.0/27",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },        
        "bastion-host-name": {
            "type": "string",
            "defaultValue": "bastion01",
            "metadata": {
                "description": "Name of Azure Bastion resource"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region for Bastion and virtual network"
            }
        },                
        "availabilityZones": {
            "type": "array",
            "defaultValue": [
                "1"
            ],
            "metadata": {
                "description": "Zone numbers e.g. 1,2,3."
            }
        },
        "firewall-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.2.0/26",
            "metadata": {
                "description": "Bastion subnet IP prefix MUST be within vnet IP prefix address space"
            }
        },
        "firewall-host-name": {
            "type": "string",
            "defaultValue": "firewall01",
            "metadata": {
                "description": "Name of Azure Bastion resource"
            }
        },
        "management-subnet-ip-prefix": {
            "type": "string",
            "defaultValue": "10.1.4.0/26",
            "metadata": {
                "description": "Management Subnet IP Prefix"
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "winBastion",
            "metadata": {
                "description": "Windows Bastion VM"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
            "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
            "description": "Password for the Virtual Machine."
            }
        },
        "OSVersion": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
            "2008-R2-SP1",
            "2012-Datacenter",
            "2012-R2-Datacenter",
            "2016-Nano-Server",
            "2016-Datacenter-with-Containers",
            "2016-Datacenter",
            "2019-Datacenter",
            "2019-Datacenter-Core",
            "2019-Datacenter-Core-smalldisk",
            "2019-Datacenter-Core-with-Containers",
            "2019-Datacenter-Core-with-Containers-smalldisk",
            "2019-Datacenter-smalldisk",
            "2019-Datacenter-with-Containers",
            "2019-Datacenter-with-Containers-smalldisk"
            ],
            "metadata": {
            "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v3",
            "metadata": {
            "description": "Size of the virtual machine."
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "management-KV",
            "metadata": {
                "description": "Specifies the name of the key vault."
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        },
        "objectId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "all"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "all"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "certificatesPermissions": {
            "type": "array",
            "defaultValue": [
                "all"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "managedIdentityName": {
            "type": "string",
            "defaultValue": "Sandbox-Deployer",
            "metadata": {
                "description": "Managed Identity is granted access to KeyVault for Secret access."
            }
        },
        "kvPrivateEndpointName" : {
            "type": "string",
            "defaultValue": "kvPE",
            "metadata": {
                "description": "Private Endpoint Name for KV"
            }
        }
    },
    "variables": {
        "bastion-public-ip-address-name": "[concat(parameters('bastion-host-name'),'-pip')]",
        "bastion-subnet-name": "AzureBastionSubnet",
        "firewall-subnet-name": "AzureFirewallSubnet",
        "management-subnet-name": "ManagementSubnet",
        "firewall-public-ip-address-name": "[concat(parameters('firewall-host-name'),'-pip')]",
        "azureFirewallSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('vnet-name'), variables('firewall-subnet-name'))]",
        "nicName": "[concat(parameters('vmName'),'-nic1')]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('management-subnet-name'))]"
    },
    "resources": [
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/publicIpAddresses",
            "name": "[variables('bastion-public-ip-address-name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "apiVersion": "2020-05-01",
            "name": "[parameters('vnet-name')]",
            "type": "Microsoft.Network/virtualNetworks",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnet-ip-prefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('bastion-subnet-name')]",
                        "properties": {
                            "addressPrefix": "[parameters('bastion-subnet-ip-prefix')]"
                        }
                    },
                    {
                        "name": "[variables('firewall-subnet-name')]",
                        "properties": {
                            "addressPrefix": "[parameters('firewall-subnet-ip-prefix')]"
                        }
                    },
                    {
                        "name": "[variables('management-subnet-name')]",
                        "properties": {
                            "addressPrefix": "[parameters('management-subnet-ip-prefix')]",
                            "privateEndpointNetworkPolicies": "Disabled",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.KeyVault"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/bastionHosts",
            "name": "[parameters('bastion-host-name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastion-public-ip-address-name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]"                
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('bastion-subnet-name'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastion-public-ip-address-name'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-06-01",
            "name": "[variables('firewall-public-ip-address-name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "2020-06-01",
            "name": "[parameters('firewall-host-name')]",
            "location": "[parameters('location')]",
            "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), parameters('availabilityZones'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]",
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('firewall-public-ip-address-name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties":{
                            "subnet": {
                                "id": "[variables('azureFirewallSubnetId')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('firewall-public-ip-address-name'))]"
                            }
                        }
                    }
                ],
                "applicationRuleCollections": [                
                ],
                "networkRuleCollections": [                
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-06-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                    "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "name": "[parameters('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [                    
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('OSVersion')]",
                    "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "StandardSSD_LRS"
                        }
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 1023,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                    {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                    "enabled": false
                    }
                }
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[parameters('managedIdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[parameters('keyVaultName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            ],
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                        "keys": "[parameters('keysPermissions')]",
                        "secrets": "[parameters('secretsPermissions')]",
                        "certificates": "[parameters('certificatesPermissions')]"
                        }
                    },
                    {
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2015-08-31-PREVIEW').principalId]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "secrets": ["Get"]                        
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('skuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Deny",
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('management-subnet-name'))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(parameters('keyVaultName'), '/', parameters('adminUsername'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('adminPassword')]"
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-06-01",
            "name": "[parameters('KVPrivateEndpointName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet-name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet-name'), variables('management-subnet-name'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('KVPrivateEndpointName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                            "groupIds": [
                                "vault"
                            ]
                        }
                    }
                ]
            }
        }
    ]
}
